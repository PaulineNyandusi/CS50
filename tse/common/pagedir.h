/* 
 * pagedir_h- header file for CS50 'pagedir' module
 * 
 * pahedir.c is a re-usable module that handles the pagesaver mentioned 
 * in the design (writing a page to the pageDirectory), and marking it as a 
 * Crawler-produced pageDirectory (as required in the spec). We chose to write 
 * this as a separate module, in ../common, to encapsulate all the knowledge about 
 * how to initialize and validate a pageDirectory, and how to write and read page files, 
 * n one place... anticipating future use by the Indexer and Querier.
 * 
 * 
 * 
 * This module, therefore pagedir.c, handles various operations related to managing
 * page directories, including initializing them and saving webpage data to files.
 * It's designed to be a reusable component for use by other modules like the
 * Indexer and Querier.
 *
 * Pauline Nyandusi, October 16, 2023
 */


#ifndef __PAGEDIR_H
#define __PAGEDIR_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "../libcs50/webpage.h"


/*/**************** pagedir_init ****************/
/* A function that initializes the page directory
 *
 * Caller provides:
 *   the page directory
 * We guarantee:
 *   a pathname for the .crawler file is created in that directory
 *   opens the file for writing;on error, return false.
 * close the file and return true.*/

bool pagedir_init(const char* pageDirectory);


/*/**************** pagedir_save ****************/
/*
   Function to save a webpage's data to a file in the page directory.
   It creates a new file for each webpage with a unique document ID.

   Parameters:
   - page: A pointer to the webpage_t structure containing the data to be saved.
   - pageDirectory: The directory where the page files will be saved.
   - docID: The unique document ID for the webpage.

   The function constructs the pathname for the page file, opens it for writing,
   and then writes the webpage's URL, depth, and contents to the file before closing it.
*/
void pagedir_save(const webpage_t* page, const char* pageDirectory, const int docID);


/*/**************** pagedir_validate****************/
/**
 *  Validates whether a directory was produced by the Crawler program.
 *
 * This function checks if a directory contains a sentinel file named ".crawler" to 
 * determine if the directory was generated by the Crawler program. If the sentinel 
 * file exists, the function returns true; otherwise, it returns false.
 *
 * parameters:
 * directory A pointer to a string representing the directory path to validate.
 * 
 * returns:
 *  A boolean value indicating whether the directory was produced by the Crawler.
 */
bool pagedir_validate(char *directory);


/*/**************** pagedir_load****************/
/**
 * Loads a webpage from a given file pointer.
 *
 * This function reads a webpage's data from a file, including the URL, depth, and HTML content.
 * It then constructs a new webpage object using the read data and returns a pointer to this object.
 * If the webpage object cannot be created, an error message is printed to the standard error stream.
 *
 * parameters: fp A pointer to a FILE structure representing the file from which the webpage will be loaded.
 * returns: A pointer to the newly created webpage object, or NULL if an error occurs.
 */
webpage_t* pagedir_load(FILE *fp);

#endif //__PAGEDIR_H

